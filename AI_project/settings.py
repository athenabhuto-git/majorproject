"""
Django settings for AI_project project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_KEY = "django-insecure-k7((fa!2m-%q8msyu@^hdlp-^@+!^m@0t)9^m!n2z1f4p)!zjh"

DEBUG = True

ALLOWED_HOSTS = []



INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "AI_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "AI_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "AI_project.wsgi.application"
import cv2
from deepface import DeepFace

def process_images(file_path):
    try:
        image = cv2.imread(file_path)
        if image is None:
            print("Error: Cannot open image file.")
            return "Unknown", 0.0

        # Perform emotion analysis on the whole image
        emotion_analysis = DeepFace.analyze(image, actions=['emotion'], enforce_detection=False)
        
        dominant_emotion = emotion_analysis[0]['dominant_emotion']
        confidence = emotion_analysis[0]['emotion'][dominant_emotion] 

        return dominant_emotion, float(confidence)
    
    except Exception as e:
        print(f"Error analyzing image: {e}")
        return "Unknown", 0.0

def process_videos(file_path):
    cap = cv2.VideoCapture(file_path)
    frame_count = 0
    frame_predictions = []

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break  # Exit when video ends

        try:
            # Perform emotion analysis on the whole frame
            emotion_analysis = DeepFace.analyze(frame, actions=['emotion'], enforce_detection=False)
            
            # Get the dominant emotion
            dominant_emotion = emotion_analysis[0]['dominant_emotion']
            frame_predictions.append(dominant_emotion)
            print(f"Frame {frame_count}: Detected Emotion - {dominant_emotion}")

            # Display the frame
            cv2.imshow('Video Frame', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        except Exception as e:
            print(f"Error processing frame {frame_count}: {e}")

        frame_count += 1

    cap.release()
    cv2.destroyAllWindows()

    # Determine the most frequently detected emotion
    if frame_predictions:
        majority_prediction = max(set(frame_predictions), key=frame_predictions.count)
        confidence = frame_predictions.count(majority_prediction) / len(frame_predictions) * 100
        return majority_prediction, float(confidence)

    return "Unknown", 0.0


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
